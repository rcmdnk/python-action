name: 'Python Test Action'
description: 'GitHub Action for Python (Poetry, pytest with coverage, linters with pre-commit) '
author: 'rcmdnk'
branding:
  icon: 'check-square'
  color: 'gray-dark'

inputs:
  checkout:
    description: 'Set 1 to run checkout.'
    default: '1'
    required: true
  setup-python:
    description: 'Set 1 to run setup-python.'
    default: '1'
    required: true
  python-version:
    description: '`python-version` for setup-python.'
    default: '3.10'
    required: true
  pip:
    description: 'pip command (e.g. `pip`, `pip3`, `pip3.10`).'
    default: 'pip'
    required: true
  setup-cmd:
    description: 'Python environment setup command.'
    default: 'poetry install'
    required: true
  pip-packages:
    description: 'Space separated package names to be installed by pip.'
    default: ''
    required: true
  poetry:
    description: 'Set 1 to setup by poetry.'
    default: '1'
    required: true
  cache:
    description: 'Cache type, "pip" or "poetry".'
    default: 'poetry'
    required: true
  pytest:
    description: 'Set 1 to run pytest.'
    default: '1'
    required: true
  pytest-tests-path:
    description: 'Path to the directory of the test files.'
    default: 'tests/'
    required: true
  pytest-ignore:
    description: 'Comma separated test file names which are excluded from the pytest.'
    default: ''
    required: true
  pytest-separate-benchmark:
    description: 'Set 1 to run benchmark tests separately (execute only once at the main test, by --benchmark-disable) and show the benchmark results in the summary (need pytest-benchmark).'
    default: '0'
    required: true
  coverage:
    description: 'Set 1 to check coverage for pytest (pytest-cov will be installed if not installed).'
    default: '1'
    required: true
  pytest-cov-path:
    description: 'Path to check coverage.'
    default: 'src'
    required: true
  coverage-push:
    description: 'Set 1 to push the coverage result to coverage branch.'
    default: '0'
    required: true
  coverage-push-condition:
    description: 'Condition to push the coverage. This will be shown in the README if it is not empty.'
    default: ''
    required: true
  github_token:
    description: 'Token to push the coverage branch.'
    default: ${{ github.token }}
    required: true
  pre-commit:
    description: 'Set 1 to run pre-commit.'
    default: '0'
    required: true
  tmate:
    description: 'Set 1 to run tmate.'
    default: '0'
    required: true

outputs:
  pytest:
    description: "pytest status"
    value: ${{ steps.check_status.outputs.pytest }}
  pre_commit:
    description: "pre-commit status"
    value: ${{ steps.check_status.outputs.pre_commit }}
  coverage:
    description: "Coverage Percantage"
    value: ${{ steps.coverageComment.outputs.coverage }}
  color:
    description: "Coverage Color"
    value: ${{ steps.coverageComment.outputs.color }}
  warnings:
    description: "Coverage Warnings"
    value: ${{ steps.coverageComment.outputs.warnings }}
  errors:
    description: "Coverage Errors"
    value: ${{ steps.coverageComment.outputs.errors }}
  failures:
    description: "Coverage Failures"
    value: ${{ steps.coverageComment.outputs.failures }}
  skipped:
    description: "Coverage Skipped"
    value: ${{ steps.coverageComment.outputs.skipped }}
  tests:
    description: "Coverage Tests"
    value: ${{ steps.coverageComment.outputs.tests }}
  time:
    description: "Coverage Time"
    value: ${{ steps.coverageComment.outputs.time }}
  notSuccessTestInfo:
    description: "Not Success Test Info"
    value: ${{ steps.coverageComment.outputs.notSuccessTestInfo }}

runs:
  using: 'composite'
  steps:
    - uses: actions/checkout@v4
      if: ${{ inputs.checkout == '1' }}
      with:
        persist-credentials: false
        fetch-depth: 0
    - name: Install poetry
      if: ${{ inputs.poetry == '1' }}
      run: |
        echo "::group::${{ inputs.pip}} install poetry"
        pipx install poetry
        echo "::endgroup::"
      shell: bash
    - uses: actions/setup-python@v4
      if: ${{ inputs.setup-python == '1' }}
      with:
        python-version: ${{ inputs.python-version }}
        cache: ${{ inputs.cache }}
    - name: Setup environment
      if: ${{ inputs.setup-cmd != '' }}
      run: |
        echo "::group::${{ inputs.setup-cmd }}"
        ${{ inputs.setup-cmd }}
        echo "::endgroup::"
      shell: bash
    - name: Install packages
      if: ${{ inputs.pip-packages != '' }}
      run: |
        echo "::group::${{ inputs.pip }} install ${{ inputs.pip-packages }}"
        ${{ inputs.pip }} install ${{ inputs.pip-packages }}
        echo "::endgroup::"
      shell: bash
    - name: Run test
      id: pytest
      if: ${{ inputs.pytest == '1' }}
      continue-on-error: true
      run: |
        poetry_cmd="${{ inputs.poetry == '1' && 'poetry run ' || ''}}"
        pytest_opt=("--durations=0")
        if [ "${{ inputs.coverage }}" = "1" ];then
          pip_list=$($poetry_cmd pip list 2>&1)
          if ! echo "$pip_list" | grep -q "^pytest-cov ";then
            pip install pytest-cov
          fi
          pytest_opt=("${pytest_opt[@]}" "--junitxml=pytest.xml" "--cov-report=term-missing:skip-covered")
          if [ -n "${{ inputs.pytest-cov-path }}" ];then
            pytest_opt=("${pytest_opt[@]}" "--cov=${{ inputs.pytest-cov-path }}")
          fi
        fi
        if [ -n "${{ inputs.pytest-ignore }}" ];then
          IFS_ORIG=$IFS
          IFS=","
          read -a files <<< "${{ inputs.pytest-ignore }}"
          IFS=$IFS_ORIG
          for f in "${files[@]}";do
            pytest_opt=("${pytest_opt[@]}" "--ignore=$f")
          done
        fi
        if [ "${{ inputs.pytest-separate-benchmark }}" = "1" ];then
          pytest_opt=("${pytest_opt[@]}" "--benchmark-disable")
        fi
        echo \$ $poetry_cmd pytest "${pytest_opt[@]}" "${{ inputs.pytest-tests-path }}"
        $poetry_cmd pytest "${pytest_opt[@]}" "${{ inputs.pytest-tests-path }}" | tee pytest-coverage.txt && status=0 || status=1
        echo "status=$status" >> $GITHUB_OUTPUT
      shell: bash
    - name: Run benchmark test
      id: benchmark
      if: ${{ inputs.pytest == '1' && inputs.pytest-separate-benchmark == '1' }}
      continue-on-error: true
      run: |
        poetry_cmd="${{ inputs.poetry == '1' && 'poetry run ' || ''}}"
        pytest_opt=(--benchmark-only --benchmark-enable)
        if [ -n "${{ inputs.pytest-ignore }}" ];then
          IFS_ORIG=$IFS
          IFS=","
          read -a files <<< "${{ inputs.pytest-ignore }}"
          IFS=$IFS_ORIG
          for f in "${files[@]}";do
            pytest_opt=("${pytest_opt[@]}" "--ignore=$f")
          done
        fi
        pip_list=$($poetry_cmd pip list 2>&1)
        if echo "$pip_list" | grep -q "^pytest-xdist ";then
          pytest_opt=("${pytest_opt[@]}" "-n0")
        fi
        echo \$ $poetry_cmd pytest "${pytest_opt[@]}" "${{ inputs.pytest-tests-path }}"
        $poetry_cmd pytest "${pytest_opt[@]}" "${{ inputs.pytest-tests-path }}" | tee benchmark.txt && status=0 || status=1
        echo "status=$status" >> $GITHUB_OUTPUT
      shell: bash
    - name: pre-commit
      if: ${{ inputs.pre-commit == '1' }}
      id: preCommit
      run: |
        echo "::group::pre-commit"
        poetry_cmd="${{ inputs.poetry == '1' && 'poetry run ' || ''}}"
        $poetry_cmd pre-commit run -a && status=0 || status=1
        echo "status=$status" >> $GITHUB_OUTPUT
        git checkout .
        echo "::endgroup::"
      shell: bash
    - name: Pytest coverage comment
      id: coverageComment
      if: ${{ inputs.coverage == '1' }}
      uses: MishaKav/pytest-coverage-comment@main
      with:
        hide-comment: true
        pytest-coverage-path: ./pytest-coverage.txt
        junitxml-path: ./pytest.xml
    - name: Check the output coverage
      if: ${{ inputs.coverage == '1' }}
      run: |
        echo "::group::coverage result"
        echo "Coverage Percantage - ${{ steps.coverageComment.outputs.coverage }}"
        echo "Coverage Color - ${{ steps.coverageComment.outputs.color }}"
        echo "Coverage Warnings - ${{ steps.coverageComment.outputs.warnings }}"
        echo "Coverage Errors - ${{ steps.coverageComment.outputs.errors }}"
        echo "Coverage Failures - ${{ steps.coverageComment.outputs.failures }}"
        echo "Coverage Skipped - ${{ steps.coverageComment.outputs.skipped }}"
        echo "Coverage Tests - ${{ steps.coverageComment.outputs.tests }}"
        echo "Coverage Time - ${{ steps.coverageComment.outputs.time }}"
        echo "Not Success Test Info - ${{ steps.coverageComment.outputs.notSuccessTestInfo }}"
        echo "::endgroup::"
      shell: bash
    - name: Update Readme in coverage branch with Coverage Html and commit to coverage branch
      if: ${{ inputs.coverage == '1' && inputs.coverage-push == '1'}}
      run: |
        echo "::group::coverage branch"
        coverage=$(git branch -a|grep "remotes/origin/coverage$") || :
        if [ -z "$coverage" ];then
          git checkout --orphan coverage
          git rm -rf .
        else
          git checkout coverage
        fi
        echo -n > ./README.md
        echo "commit: [$GITHUB_SHA]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/tree/$GITHUB_SHA)" >> ./README.md
        echo "" >> ./README.md
        if [ -n "${{ inputs.coverage-push-condition }}" ];then
          echo "condition: ${{ inputs.coverage-push-condition }}" >> ./README.md
          echo "" >> ./README.md
        fi
        workflow_file=$(basename $(echo $GITHUB_WORKFLOW_REF | cut -d @ -f1))
        echo "[![$GITHUB_WORKFLOW]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/workflows/$workflow_file/badge.svg)]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)" >> ./README.md
        echo -e ${{ steps.coverageComment.outputs.summaryReport }} >> ./README.md
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add README.md
        PRE_COMMIT_ALLOW_NO_CONFIG=1 git commit -m "Update coverage"
        echo "::endgroup::"
      shell: bash
    - name: Push
      if: ${{ inputs.coverage == '1' && inputs.coverage-push == '1' }}
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ inputs.github_token }}
        branch: coverage
    - name: Go back to the original branch
      if: ${{ inputs.coverage == '1' && inputs.coverage-push == '1'}}
      run: |
        git checkout $GITHUB_REF_NAME
      shell: bash
    - name: Check status
      id: check_status
      if: ${{ inputs.pytest == '1' || inputs.pre-commit == '1' }}
      continue-on-error: ${{ inputs.tmate == '1' }}
      run: |
        output=""
        pytest=1
        if [ "${{ inputs.pytest }}" = 1 ];then
          if [ "${{ steps.pytest.outputs.status }}" != "0" ];then
            echo "Pytest failed!"
            pytest=0
            output="${output}![pytest](https://img.shields.io/badge/pytest-failing-critical)"
          else
            output="${output}![pytest](https://img.shields.io/badge/pytest-passing-success)"
          fi
        fi
        pre_commit=1
        if [ "${{ inputs.pre-commit }}" = 1 ];then
          if [ "${{ steps.preCommit.outputs.status }}" != "0" ];then
            echo "pre-commit failed!"
            pre_commit=0
            output="${output}![pre-commit](https://img.shields.io/badge/pre_commit-failing-critical)"
          else
            output="${output}![pre-commit](https://img.shields.io/badge/pre_commit-passing-success)"
          fi
        fi
        echo -n "${output}" > $GITHUB_STEP_SUMMARY

        if [ "${{ inputs.coverage }}" = 1 ];then
          echo -e ${{ steps.coverageComment.outputs.summaryReport }} >> $GITHUB_STEP_SUMMARY
        fi
        if [ "${{ inputs.pytest-separate-benchmark }}" = 1 ];then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Benchmark tests" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat benchmark.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi
        (( pytest == 1 )) && (( pre_commit == 1 ))
      shell: bash
    - name: Setup tmate session
      if: ${{ inputs.tmate == '1' }}
      uses: mxschmitt/action-tmate@v3
